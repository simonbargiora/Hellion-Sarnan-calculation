{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red220\green220\blue220;\red26\green26\blue29;\red109\green115\blue120;
\red21\green21\blue21;\red183\green187\blue184;\red183\green111\blue247;\red120\green162\blue246;\red113\green192\blue131;
}
{\*\expandedcolortbl;;\cssrgb\c89020\c89020\c89020;\cssrgb\c13333\c13725\c15294;\cssrgb\c50196\c52549\c54510;
\cssrgb\c10588\c10588\c10588;\cssrgb\c76863\c78039\c77255;\cssrgb\c77255\c54118\c97647;\cssrgb\c54118\c70588\c97255;\cssrgb\c50588\c78824\c58431;
}
\margl1440\margr1440\vieww28600\viewh17440\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
import numpy as np\
import matplotlib.pyplot as plt\
from astropy import constants as const\
from astropy import units as u\
from astroquery.simbad import Simbad\
from astroML.plotting import scatter_contour\
\
# Define classes for Vec2 and Particle similar to the previous program\
\
# Define class for binary system (combining Hellion and Sarnan)\
class BinarySystem:\
    def __init__(self, hellion_data, sarnan_data, orbital_data):\
        # Initialize the binary system using the provided data\
        # Set up the stars (Hellion and Sarnan) with their properties\
        # Set up the orbital parameters (semi-major axis, eccentricity, etc.)\
        pass\
\
\pard\pardeftab720\partightenfactor0

\fs34\fsmilli17231 \cf4 \cb5 # Check the units of the input data\cf6 \
        \cf7 for\cf6  key, value \cf7 in\cf6  orbital_data.items():\
            \cf7 if\cf6  \cf7 not\cf6  \cf8 isinstance\cf6 (value, u.Quantity):\
                \cf7 raise\cf6  ValueError(\cf9 f'The value \cf2 \{key\}\cf9  must be a Quantity.'\cf6 )\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb3 \
\
    # ... (rest of the class methods)\
\
# Main code to create the binary system and perform simulations\
def main():\
\
def main():\
    # Get the orbital data from SIMBAD\
    simbad_results = Simbad.query_object('Hellion Sarnan')\
    similar_systems = ['61 Cygni', 'Alpha Centauri A', 'Epsilon Indi', 'Castor', '67 Ursae Majoris']\
\
    # Check if the Hellion system is found\
    if simbad_results is None:\
        print('Error: The Hellion-Sarnan system was not found in SIMBAD.')\
        print('Instead, comparing Hellion-Sarnan to similar systems:')\
        for system in similar_systems:\
            print(system)\
        sys.exit(1)\
\
    # Get the orbital parameters\
    semi_major_axis = simbad_results['a'] * u.km\
    eccentricity = simbad_results['e']\
    aphelion_distance = simbad_results['q'] * u.km\
    perihelion_distance = simbad_results['p'] * u.km\
    orbital_velocity = simbad_results['v'] * u.m / u.s\
    orbital_period = simbad_results['P'] * u.year\
\
    # Compare the Hellion system to the similar systems\
    for system in similar_systems:\
        simbad_results_system = Simbad.query_object(system)\
        semi_major_axis_system = simbad_results_system['a'] * u.km\
        eccentricity_system = simbad_results_system['e']\
        aphelion_distance_system = simbad_results_system['q'] * u.km\
        perihelion_distance_system = simbad_results_system['p'] * u.km\
        orbital_velocity_system = simbad_results_system['v'] * u.m / u.s\
        orbital_period_system = simbad_results_system['P'] * u.year\
\
        print(f'\{system\}:')\
        print(f'Semi-major axis: \{semi_major_axis_system\}')\
        print(f'Eccentricity: \{eccentricity_system\}')\
        print(f'Aphelion distance: \{aphelion_distance_system\}')\
        print(f'Perihelion distance: \{perihelion_distance_system\}')\
        print(f'Orbital velocity: \{orbital_velocity_system\}')\
        print(f'Orbital period: \{orbital_period_system\}')\
\
    ...\
\
    # Data for Hellion\
    hellion_data = \{\
        'Age': 5.2e9 * u.year,\
        'Radius': 699226.7 * u.km,\
        'Hydrogen Abundance': 71.2 * 0.01,  # Convert from percentage to fraction\
        'Helium Abundance': 8.3 * 0.01,    # Convert from percentage to fraction\
        'Metallicity': 0.38 * 1e-2,        # Convert from percentage to fraction\
        'Mass': 2.148228e30 * u.kg,\
        'Density': 1.6736e9 * u.kg / u.km**3,\
        'Volume': 1.31316e30 * u.km**3,\
        'Average Density': 1.634e9 * u.kg / u.km**3,\
        'Total Binding Energy (U1)': 2.3096e36 * u.joule,\
        'Central Density (Hellion)': 1500.1605932993 * u.kg / u.m**3,\
        'Density at r = 500,000 km': 4.633 * u.kg / u.km**3,\
        'Composition': \{\
            'Hydrogen (H)': 71.2 * 0.01,\
            'Helium (He)': 8.3 * 0.01,\
            'Carbon (C)': 5.2 * 0.01,\
            'Nitrogen (N)': 2.4 * 0.01,\
            'Oxygen (O)': 0.77 * 0.01,\
            'Silicon (Si)': 6 * 0.01,\
            'Iron (Fe)': 0.16 * 0.01,\
            'Sulfur (S)': 0.04 * 0.01,\
            'Boron (B)': 2.9 * 0.01,\
            'Sodium (Na)': 1.5 * 0.01,\
            'Magnesium (Mg)': 4.8 * 0.01 * 0.98,  # Reduced by 2% from its previous value\
        \}\
    \}\
\
    # Data for Sarnan\
    sarnan_data = \{\
        'Age': 5.2e9 * u.year,\
        'Radius': 699496.94 * u.km,\
        'Hydrogen Abundance': 73.1 * 0.01,  # Convert from percentage to fraction\
        'Helium Abundance': 8.0 * 0.01,    # Convert from percentage to fraction\
        'Metallicity': 0.4 * 1e-2,         # Convert from percentage to fraction\
        'Mass': 2.14751e30 * u.kg,\
        'Density': 1.6730e9 * u.kg / u.km**3,\
        'Volume': 1.31377e30 * u.km**3,\
        'Average Density': 1.634e9 * u.kg / u.km**3,\
        'Total Binding Energy (U2)': 2.3101e36 * u.joule,\
        'Central Density (Sarnan)': 1497.921756058127 * u.kg / u.m**3,\
        'Composition': \{\
            'Hydrogen (H)': 73.1 * 0.01,\
            'Helium (He)': 8.0 * 0.01,\
            'Carbon (C)': 5.2 * 0.01,\
            'Nitrogen (N)': 2.4 * 0.01,\
            'Oxygen (O)': 0.77 * 0.01,\
            'Silicon (Si)': 0.12 * 0.01,\
            'Iron (Fe)': 6 * 0.01,\
            'Sulfur (S)': 0.04 * 0.01,\
            'Boron (B)': 2.9 * 0.01,\
            'Sodium (Na)': 0.5 * 0.01,  # Reduced from 1.5% to 0.5%\
            'Magnesium (Mg)': 0.1 * 0.01,\
        \}\
    \}\
\
    # Data for the binary system's orbital parameters\
\
    orbital_data = \{\
    'Semi-major axis (a)': 8_851_342.7 * u.km,  # Aphelion distance\
    'Eccentricity': 0,  # Circular orbit\
    'Aphelion distance': 17_702_685.4 * u.km,\
    'Perihelion distance': 14_484_766.6 * u.km,\
    'Orbital Velocity (v)': 1.6927e10 * u.m/u.s,\
    'Orbital Period': 7.582315856878782e-07 * u.year,\
    'Surface Gravity (Hellion)': 294.387366549432 * u.m/u.s**2,\
\}\
\
\
\
\
\
\
\
\
 orbital_data: \{\
    'Semi-major axis (a)': 8_851_342.7 * u.km,  # Aphelion distance\
    'Eccentricity': 0,  # Circular orbit\
    'Aphelion distance': 17_702_685.4 * u.km,\
    'Perihelion distance': 14_484_766.6 * u.km,\
    'Orbital Velocity (v)': 1.6927e10 * u.m/u.s,\
    'Orbital Period': 7.582315856878782e-07 * u.year,\
    'Surface Gravity (Hellion)': 294.387366549432 * u.m/u.s**2,\
\}\
\
\
\}\
        # Fill in the rest of the orbital parameters\
    \
\
    # Create the binary system object\
    binary_system = BinarySystem(hellion_data, sarnan_data, orbital_data)\
\
    # Query Simbad for additional data\
    binary_system.query_simbad()\
\
    # Perform simulations\
    total_time = 100  # Total simulation time (adjust as needed)\
    time_steps = 1000  # Number of time steps (adjust as needed)\
    binary_system.simulate_binary_system(total_time, time_steps)\
\
    # Visualize the results\
    binary_system.visualize_results()\
\
    # Perform machine learning analysis\
    binary_system.machine_learning_analysis()\
\
if __name__ == "__main__":\
    main()\
\
import matplotlib.pyplot as plt\
from astropy import constants as const\
from astropy import units as u\
from astroquery.simbad import Simbad\
from astroML.plotting import scatter_contour\
\
# Define classes for Vec2 and Particle similar to the previous program\
\
# Define class for binary system (combining Hellion and Sarnan)\
class BinarySystem:\
    def __init__(self, hellion_data, sarnan_data, orbital_data):\
        # Initialize the binary system using the provided data\
        # Set up the stars (Hellion and Sarnan) with their properties\
        # Set up the orbital parameters (semi-major axis, eccentricity, etc.)\
        pass\
\
    # ... (rest of the class methods)\
\
# Main code to create the binary system and perform simulations\
def main():\
    # Data for Hellion\
    hellion_data = \{\
        'Age': 5.2e9 * u.year,\
        'Radius': 699226.7 * u.km,\
        'Hydrogen Abundance': 71.2 * 0.01,  # Convert from percentage to fraction\
        'Helium Abundance': 8.3 * 0.01,    # Convert from percentage to fraction\
        'Metallicity': 0.38 * 1e-2,        # Convert from percentage to fraction\
        'Mass': 2.148228e30 * u.kg,\
        'Density': 1.6736e9 * u.kg / u.km**3,\
        'Volume': 1.31316e30 * u.km**3,\
        'Average Density': 1.634e9 * u.kg / u.km**3,\
        'Total Binding Energy (U1)': 2.3096e36 * u.joule,\
        'Central Density (Hellion)': 1500.1605932993 * u.kg / u.m**3,\
        'Density at r = 500,000 km': 4.633 * u.kg / u.km**3,\
        'Composition': \{\
            'Hydrogen (H)': 71.2 * 0.01,\
            'Helium (He)': 8.3 * 0.01,\
            'Carbon (C)': 5.2 * 0.01,\
            'Nitrogen (N)': 2.4 * 0.01,\
            'Oxygen (O)': 0.77 * 0.01,\
            'Silicon (Si)': 6 * 0.01,\
            'Iron (Fe)': 0.16 * 0.01,\
            'Sulfur (S)': 0.04 * 0.01,\
            'Boron (B)': 2.9 * 0.01,\
            'Sodium (Na)': 1.5 * 0.01,\
            'Magnesium (Mg)': 4.8 * 0.01 * 0.98,  # Reduced by 2% from its previous value\
        \}\
    \}\
\
    # Data for Sarnan\
    sarnan_data = \{\
        'Age': 5.2e9 * u.year,\
        'Radius': 699496.94 * u.km,\
        'Hydrogen Abundance': 73.1 * 0.01,  # Convert from percentage to fraction\
        'Helium Abundance': 8.0 * 0.01,    # Convert from percentage to fraction\
        'Metallicity': 0.4 * 1e-2,         # Convert from percentage to fraction\
        'Mass': 2.14751e30 * u.kg,\
        'Density': 1.6730e9 * u.kg / u.km**3,\
        'Volume': 1.31377e30 * u.km**3,\
        'Average Density': 1.634e9 * u.kg / u.km**3,\
        'Total Binding Energy (U2)': 2.3101e36 * u.joule,\
        'Central Density (Sarnan)': 1497.921756058127 * u.kg / u.m**3,\
        'Composition': \{\
            'Hydrogen (H)': 73.1 * 0.01,\
            'Helium (He)': 8.0 * 0.01,\
            'Carbon (C)': 5.2 * 0.01,\
            'Nitrogen (N)': 2.4 * 0.01,\
            'Oxygen (O)': 0.77 * 0.01,\
            'Silicon (Si)': 0.12 * 0.01,\
            'Iron (Fe)': 6 * 0.01,\
            'Sulfur (S)': 0.04 * 0.01,\
            'Boron (B)': 2.9 * 0.01,\
            'Sodium (Na)': 0.5 * 0.01,  # Reduced from 1.5% to 0.5%\
            'Magnesium (Mg)': 0.1 * 0.01,\
        \}\
    \}\
\
    # Data for the binary system's orbital parameters\
    orbital_data = \{\
        'Semi-major axis (a)': 8_851_342.7 * u.km,  # Aphelion distance\
        'Eccentricity': 0,  # Circular orbit\
        'Aphelion distance': 17_702_685.4 * u.km,\
        'Perihelion distance': 14_484_766.6 * u.km,\
        'Orbital Velocity (v)': 1.6927e10 * u.m/u.s,\
        'Orbital Period': 7.582315856878782e-07 * u.year,\
        'Surface Gravity (Hellion)': 294.387366549432 * u.m/u.s**2,\
orbital_data = \{\
    'Semi-major axis (a)': 8_851_342.7 * u.km,  # Aphelion distance\
    'Eccentricity': 0,  # Circular orbit\
    'Aphelion distance': 17_702_685.4 * u.km,\
    'Perihelion distance': 14_484_766.6 * u.km,\
    'Orbital Velocity (v)': 1.6927e10 * u.m/u.s,\
    'Orbital Period': 7.582315856878782e-07 * u.year,\
    'Surface Gravity (Hellion)': 294.387366549432 * u.m/u.s**2,\
\}\
 Get the orbital data from SIMBAD\
simbad_results = Simbad.query_object('Hellion Sarnan')\
orbital_data['Semi-major axis (a)'] = simbad_results['a']\
orbital_data['Eccentricity'] = simbad_results['e']\
orbital_data['Aphelion distance'] = simbad_results['q']\
orbital_data['Perihelion distance'] = simbad_results['p']\
orbital_data['Orbital Velocity (v)'] = simbad_results['v']\
orbital_data['Orbital Period'] = simbad_results['P']\
        # Fill in the rest of the orbital parameters\
    \}\
\
    # Create the binary system object\
    binary_system = BinarySystem(hellion_data, sarnan_data, orbital_data)\
\
    # Query Simbad for additional data\
    binary_system.query_simbad()\
\
    # Perform simulations\
    total_time = 100  # Total simulation time (adjust as needed)\
    time_steps = 1000  # Number of time steps (adjust as needed)\
    binary_system.simulate_binary_system(total_time, time_steps)\
\
    # Visualize the results\
    binary_system.visualize_results()\
\
    # Perform machine learning analysis\
    binary_system.machine_learning_analysis()\
\
if __name__ == "__main__":\
    main()}